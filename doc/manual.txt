Willow, a Python framework for experimental economics
=====================================================

//////////////////////////////////////////////////////////////////////
This manual is written in the asciidoc markup language, which can be
compiled into HTML, PDF, and suchlike. It is quite readable as plain
text, too, but if you decide to edit it, please do make sure that it
remains valid asciidoc!
//////////////////////////////////////////////////////////////////////

:icons:
:toc:

About this manual
-----------------

You are reading the manual for Willow, a Python framework for
experimental economics. This manual presumes that you already have an
understanding of experimental economics, of HTML, and of Python
programming.

If you are interested in learning about experimental economics, you
could do worse than to have a look at the following textbooks:

* Daniel Friedman, 'Experimental Methods: A Primer for Economists'
* John Kagel and Alvin Roth, 'The Handbook of Experimental Economics'

In order to get started with Python if you already know how to program
in some other language, you can try

* Mark Pilgrim, 'Dive into Python' (http://diveintopython.org)
* Guido van Rossum et al., 'The Python Tutorial'
  (http://docs.python.org/tutorial/)

If you want to learn both the craft of computer programming and the
Python programming language at the same time, you are in luck, since
Python is an excellent first language. Some free resources include:

* Jeffrey Elkner, Allen B. Downey, and Chris Meyers, 'How to Think
  Like a Computer Scientist'
  (http://openbookproject.net/thinkCSpy/)
* Swaroop C. H., 'A Byte of Python'
  (http://www.swaroopch.com/notes/Python)

Why Willow?
-----------

Willow is a tool for making the kinds of computer user interfaces
typically used in experimental economics. Without Willow, you might
design such an interface from scratch, or by modifying earlier
from-scratch software written for similar experiments. Using Willow,
you can do the same thing, but faster and better.

Willow sets out to accomplish this goal not by providing canned
routines for commonly performed experiments. After all, it is
precisely because our experiments are different from what has gone
before that we bother with them. Rather, Willow is a generic toolkit
that makes a lot of the things we do in experimental economics easy.

A running Willow program consists of server and a number of
clients. The clients are web browsers and the server is a Python
program created using the +willow+ library. Inside the server, there
is one 'session thread' corresponding to each client; session threads
are created automatically as clients connect to the server. Each
session thread is capable of manipulating the contents of the web page
displayed on its corresponding client browser, receiving input from
that client browser, and of posting and reading 'notes' on a common
'board' that the session threads use to communicate with one another.


Installing Willow
-----------------

To install Willow, you extract the zip file to a convenient
location. You will do this anew for each of your Willow projects.  In
addition, you will need to have Python installed. Willow has been
tested using Python 2.6 on Ubuntu GNU/Linux. You should be able to use
it with Python 2.6 on Windows and Mac OSX as well. If you do not have
Python 2.6 on your computer, get it from
http://www.python.org/download/releases/2.6.3/ and then come back. If
you are not sure whether you have Python 2.6 on your computer, just
move on to the next section of the manual. If things don't work,
you'll notice soon enough, and you can go back and install Python.


Using Willow
------------

Willow works very similarly on different operating systems, but from
here on I am going to assume that you use Windows. In the Willow
folder, you will find a file named +hello.py+. You need to run this
file by double-clicking on it. Once the +hello.py+ program is running,
fire up a web browser and point it to +http://localhost:8000+. You
should see a page that looks like so:

**********************************************************************
Hello World.
**********************************************************************

In practice, while programming, you will want to run Willow from
within IDLE, which is the integrated development environment that
comes with Python. To do so, right-click +hello.py+ and select "Edit
with IDLE". This will pop up an editor window with the +hello.py+ code
in it:

[source,python]
----------------------------------------------------------------------
from willow import willow

def session(client, board, log):
  client.add("<h1>Hello, world.</h1>")

willow.run(session)        
----------------------------------------------------------------------

See here the code of a very simple but working Willow program. You can
run it using the +Run > Run Module+ menu option or by pressing
+F5+. Again, you now need to point a web browser to
+http://localhost:8000+. 

WARNING: There is a slight probability that, while you are
programming, you will encounter an "Address already in use" error
message. If you are not in fact already running another instance of
Willow or some other programm trying to be a server on port 8000, this
is a bug. In technical terms, Willow sets the +SO_REUSEADDR+ flag and
should therefore not be vulnerable to TCP connections that linger in
the +TIME_WAIT+ state. If you run into this problem anyway, please (a)
wait 5 minutes and try again, and (b) file a bug report.



API documentation
-----------------

NOTE: In Python, the value +x+ is the same as +(x)+, but it is not the
    same as the one-element tuple containing it, which is written
    +(x,)+.

+willow.run(session, [port])+:: 

  This starts the Willow web server on the specified port (or port
  8000 if you leave the second argument out). The web server will
  create a thread for each client that connects, and each thread will
  run the +session+ function. Three parameters are passed to the
  +session+ function: a +Client+ object, a +Board+ object, and a +Log+
  object. The +Board+ and +Log+ objects are the same for all threads
  in a given web server instance, but the +Client+ objects are
  different for each thread. The web server will search for requested
  files in the current directory, among other places, so you can for
  instance include images in your pages.

+willow.config(filename)+::

  Reads a configuration file in JSON format and returns a
  corresponding Python object. For instance, if you have a file
  +protocol.txt+ containing the text +{ "rounds" : 12, "subjects" :
  4}+ then +cfg = willow.config("protocol.txt")+ will set the variable
  +cfg+ to the python dictionary +{u'rounds': 12, u'subjects':
  4}+. The letter +u+ appears in front of the strings because JSON
  strings are Unicode, not ASCII, but you do not need to worry; to get
  the value of the +rounds+ parameter, simply use
  +cfg['rounds']+. JSON is a very simple data file format that is
  widely used in interactive web programming; for documentation, see
  the JSON web site (http://json.org/).

+class Client+::

  The +Client+ class represents a browser window on the user's
  end. Whenever a method takes a +selector+ argument, that argument
  can specify a subset of the HTML nodes in the document using an
  arbitrary jQuery selector (http://docs.jquery.com/Selectors). The
  most common selectors are of the form +"#bid"+, which selects the
  one element with +id+ set to +"bid"+, and the form +".entry"+, which
  selects all elements that have +entry+ among their styles.

  +client.add(argument, [selector])+;;

    Add some HTML to the specified elements, or the base element if
    none is specified. In particular, +argument+ can either be a
    string, or an object (such as a file descriptor) that has a
    +read()+ method that yields a string. The typical ways of using it
    are +client.add("<p>foo</p>")+, which would add the HTML code
    +<p>foo</p>+ to the base element, and
    +client.add(open("template.html"))+, which would add the contents
    of +template.html+ to the base element.

  +client.push(classname, [selector])+;;

    Add a CSS class to the specified elements, or the base element if
    none is specified. Example: +client.push("selected","#option3")+
    adds the +selected+ class to the element with id +option3+.

  +client.pop(classname, [selector])+;;

    Remove a CSS class from the specified elements, or the base
    element if none is specified.

  +client.clear([selector])+;;

    Clear the content of specified elements, or of the base element if
    none is specified.

  +client.hide([selector])+;;

    Hide the specified elements, or the base element if
    none is specified.

  +client.show([selector])+;;

    Show the specified elements. This works both on elements
    previously hidden using the +client.hide()+ method and on items
    automatically hidden because they are of class +hidden+.

  +client.data([selector])+;;

    Request that the +value+ attributes of the specified elements be
    posted on the board as tuples of the form +("data",id,?)+, where
    +id+ is the client number, and +?+ is the requested data.

  +client.hold()+;;

    Request that all subsequent actions pertaining to this client be
    buffered until +client.flush()+ is called. (Idempotent.) 

  +client.flush()+;;

    Request that all buffered actions be processed. (Idempotent.) When
    the +hold+ and +flush+ operations are used to group together a
    number of actions, the actions will be delivered to the client in
    a single AJAX message, which is considerably faster.

+class Board+::

  The +Board+ is an object used for communication and synchronization
  between threads. Threads can post notes on the board, and take notes
  off the board.

  +board.put(x, [delay])+;;

    Add the tuple +x+ to the board, with an optional delay in seconds.

  +board.get(x,y,...)+;;

    Wait until the tuples +x+, or the tuple +y+, etc., appears on the
    board, 'then remove it from the board.' Returns the tuple
    retrieved. If one or more of the elements in a tuple are +None+,
    those will act as wildcards. For instance,
    +board.get\(("foo",None))+ will wait until a tuple shows up on the
    board that has two elements, the first of which is +"foo"+, and
    the second of which may be anything. Similarly,
    +board.get\((None,None,None))+ matches 'any' three-element tuple.

+class Log+::

  +log.write(x,y,...)+;;
    Write (x,y,...) to the log file as a record. A new log file is
    created each time +willow.run()+ is invoked, and it bears a name
    based on the date and time when it was created. The log files are
    in CSV format and can be opened with a text editor or a
    spreadsheet program.



Willow CSS tricks
-----------------

Some Willow features are accessed by means of CSS classes:

+hidden+::

	Any element that has class +hidden+ turned on will start out
	hidden. You can call +client.show()+ on it to make it
	appear. Example: +<p>At the moment, you can<span
	class="hidden">not</span> trade widgets.</p>+

+bait+::

	Any element that has class +bait+ turned on will automatically
	get the additional class +mouse+ turned on whenever the mouse
	pointer is positioned over that element. This can be used to
	create "hover" effects.
